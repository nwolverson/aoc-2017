use "collections"

type Matrix is Array[Array[I32]]

actor Main
    var input_2x2 : Array[Matrix] = [[[0; 0]; [0; 0]] // 011/100/001
[[1; 0]; [0; 0]] // 011/100/111
[[1; 1]; [0; 0]] // 001/101/100
[[0; 1]; [1; 0]] // 100/100/010
[[1; 1]; [1; 0]] // 010/100/100
[[1; 1]; [1; 1]] // 011/000/011
    ]
    var input_3x3 : Array[Matrix] = [
[[0; 0; 0]; [0; 0; 0]; [0; 0; 0]] // 1010/1110/1111/1001
[[1; 0; 0]; [0; 0; 0]; [0; 0; 0]] // 0111/1111/1100/1011
[[0; 1; 0]; [0; 0; 0]; [0; 0; 0]] // 1110/0111/1001/1011
[[1; 1; 0]; [0; 0; 0]; [0; 0; 0]] // 0000/0000/0100/1100
[[1; 0; 1]; [0; 0; 0]; [0; 0; 0]] // 0001/0110/0000/1100
[[1; 1; 1]; [0; 0; 0]; [0; 0; 0]] // 1100/1100/1101/0011
[[0; 1; 0]; [1; 0; 0]; [0; 0; 0]] // 0100/1110/1100/1111
[[1; 1; 0]; [1; 0; 0]; [0; 0; 0]] // 1111/1101/0000/0011
[[0; 0; 1]; [1; 0; 0]; [0; 0; 0]] // 0010/1111/0001/1011
[[1; 0; 1]; [1; 0; 0]; [0; 0; 0]] // 1010/1100/1100/0110
[[0; 1; 1]; [1; 0; 0]; [0; 0; 0]] // 1100/1111/0010/0001
[[1; 1; 1]; [1; 0; 0]; [0; 0; 0]] // 1001/1010/1101/1010
[[0; 0; 0]; [0; 1; 0]; [0; 0; 0]] // 0101/0010/1000/0000
[[1; 0; 0]; [0; 1; 0]; [0; 0; 0]] // 1100/0011/0011/0100
[[0; 1; 0]; [0; 1; 0]; [0; 0; 0]] // 0000/1100/1100/1011
[[1; 1; 0]; [0; 1; 0]; [0; 0; 0]] // 0001/1100/1001/0111
[[1; 0; 1]; [0; 1; 0]; [0; 0; 0]] // 1111/1101/1110/0011
[[1; 1; 1]; [0; 1; 0]; [0; 0; 0]] // 0000/0001/0111/0100
[[0; 1; 0]; [1; 1; 0]; [0; 0; 0]] // 1010/1001/0110/0101
[[1; 1; 0]; [1; 1; 0]; [0; 0; 0]] // 0111/1000/1001/1010
[[0; 0; 1]; [1; 1; 0]; [0; 0; 0]] // 0111/1111/0000/1011
[[1; 0; 1]; [1; 1; 0]; [0; 0; 0]] // 0001/0111/0111/0111
[[0; 1; 1]; [1; 1; 0]; [0; 0; 0]] // 0011/0011/0111/1101
[[1; 1; 1]; [1; 1; 0]; [0; 0; 0]] // 1111/1001/1111/1010
[[0; 0; 0]; [1; 0; 1]; [0; 0; 0]] // 1011/0010/0111/1010
[[1; 0; 0]; [1; 0; 1]; [0; 0; 0]] // 1111/1101/1101/0000
[[0; 1; 0]; [1; 0; 1]; [0; 0; 0]] // 1000/0001/1011/1001
[[1; 1; 0]; [1; 0; 1]; [0; 0; 0]] // 0101/1100/1100/0000
[[1; 0; 1]; [1; 0; 1]; [0; 0; 0]] // 1101/1000/1100/0100
[[1; 1; 1]; [1; 0; 1]; [0; 0; 0]] // 0001/1110/0101/0001
[[0; 0; 0]; [1; 1; 1]; [0; 0; 0]] // 0111/1011/1000/1110
[[1; 0; 0]; [1; 1; 1]; [0; 0; 0]] // 0011/0100/0111/0010
[[0; 1; 0]; [1; 1; 1]; [0; 0; 0]] // 0000/0110/1011/1011
[[1; 1; 0]; [1; 1; 1]; [0; 0; 0]] // 0101/1101/1000/1010
[[1; 0; 1]; [1; 1; 1]; [0; 0; 0]] // 0010/1000/1010/0110
[[1; 1; 1]; [1; 1; 1]; [0; 0; 0]] // 0011/0101/1001/0110
[[0; 0; 1]; [0; 0; 0]; [1; 0; 0]] // 0011/0100/1101/1100
[[1; 0; 1]; [0; 0; 0]; [1; 0; 0]] // 0010/0000/1000/0001
[[0; 1; 1]; [0; 0; 0]; [1; 0; 0]] // 0110/0011/1111/1000
[[1; 1; 1]; [0; 0; 0]; [1; 0; 0]] // 1011/0000/1100/1011
[[0; 1; 1]; [1; 0; 0]; [1; 0; 0]] // 0111/0001/1110/0000
[[1; 1; 1]; [1; 0; 0]; [1; 0; 0]] // 0101/1010/1011/0010
[[0; 0; 1]; [0; 1; 0]; [1; 0; 0]] // 0001/0010/0011/0101
[[1; 0; 1]; [0; 1; 0]; [1; 0; 0]] // 1000/1101/0111/1010
[[0; 1; 1]; [0; 1; 0]; [1; 0; 0]] // 1110/1111/1001/1101
[[1; 1; 1]; [0; 1; 0]; [1; 0; 0]] // 0000/0010/0000/1000
[[0; 1; 1]; [1; 1; 0]; [1; 0; 0]] // 0101/0110/0101/1011
[[1; 1; 1]; [1; 1; 0]; [1; 0; 0]] // 0000/1100/1110/0101
[[1; 0; 0]; [0; 0; 1]; [1; 0; 0]] // 0001/1000/1011/0111
[[0; 1; 0]; [0; 0; 1]; [1; 0; 0]] // 1001/0100/1110/1010
[[1; 1; 0]; [0; 0; 1]; [1; 0; 0]] // 1010/0010/1110/1110
[[1; 0; 1]; [0; 0; 1]; [1; 0; 0]] // 0101/1101/1100/1111
[[0; 1; 1]; [0; 0; 1]; [1; 0; 0]] // 1110/0000/0100/0001
[[1; 1; 1]; [0; 0; 1]; [1; 0; 0]] // 1010/0110/0101/1001
[[1; 0; 0]; [1; 0; 1]; [1; 0; 0]] // 1010/1101/0100/0111
[[0; 1; 0]; [1; 0; 1]; [1; 0; 0]] // 1101/1010/1000/1111
[[1; 1; 0]; [1; 0; 1]; [1; 0; 0]] // 0101/1000/0010/1011
[[0; 0; 1]; [1; 0; 1]; [1; 0; 0]] // 1101/0110/1000/0111
[[1; 0; 1]; [1; 0; 1]; [1; 0; 0]] // 0011/0000/0000/1111
[[0; 1; 1]; [1; 0; 1]; [1; 0; 0]] // 1111/1010/1110/0101
[[1; 1; 1]; [1; 0; 1]; [1; 0; 0]] // 1011/0010/1100/1000
[[1; 0; 0]; [0; 1; 1]; [1; 0; 0]] // 0011/1101/1111/0100
[[0; 1; 0]; [0; 1; 1]; [1; 0; 0]] // 0011/1100/0100/0011
[[1; 1; 0]; [0; 1; 1]; [1; 0; 0]] // 0011/0101/1001/0000
[[1; 0; 1]; [0; 1; 1]; [1; 0; 0]] // 1000/1100/0001/0101
[[0; 1; 1]; [0; 1; 1]; [1; 0; 0]] // 1100/0001/0111/0101
[[1; 1; 1]; [0; 1; 1]; [1; 0; 0]] // 1111/0010/0110/1011
[[1; 0; 0]; [1; 1; 1]; [1; 0; 0]] // 0101/1101/1010/1010
[[0; 1; 0]; [1; 1; 1]; [1; 0; 0]] // 0111/1001/0101/1110
[[1; 1; 0]; [1; 1; 1]; [1; 0; 0]] // 1100/0100/1110/0101
[[0; 0; 1]; [1; 1; 1]; [1; 0; 0]] // 1011/0000/0001/0010
[[1; 0; 1]; [1; 1; 1]; [1; 0; 0]] // 1000/1001/0000/0100
[[0; 1; 1]; [1; 1; 1]; [1; 0; 0]] // 1111/1001/0010/0101
[[1; 1; 1]; [1; 1; 1]; [1; 0; 0]] // 0110/1100/0100/0010
[[0; 1; 0]; [1; 0; 1]; [0; 1; 0]] // 1010/0111/1010/0011
[[1; 1; 0]; [1; 0; 1]; [0; 1; 0]] // 0110/0000/0011/1100
[[1; 0; 1]; [1; 0; 1]; [0; 1; 0]] // 0001/0000/0101/0011
[[1; 1; 1]; [1; 0; 1]; [0; 1; 0]] // 0100/1111/1010/1011
[[0; 1; 0]; [1; 1; 1]; [0; 1; 0]] // 1001/0101/1001/1010
[[1; 1; 0]; [1; 1; 1]; [0; 1; 0]] // 0100/1100/1001/0011
[[1; 0; 1]; [1; 1; 1]; [0; 1; 0]] // 1010/0110/1101/0101
[[1; 1; 1]; [1; 1; 1]; [0; 1; 0]] // 1010/0001/0011/1000
[[1; 0; 1]; [0; 0; 1]; [1; 1; 0]] // 0010/0010/0001/1001
[[1; 1; 1]; [0; 0; 1]; [1; 1; 0]] // 1001/1110/0000/1101
[[0; 1; 1]; [1; 0; 1]; [1; 1; 0]] // 1011/0101/0001/0011
[[1; 1; 1]; [1; 0; 1]; [1; 1; 0]] // 1011/0001/0110/0111
[[1; 0; 1]; [0; 1; 1]; [1; 1; 0]] // 0000/1101/0000/0001
[[1; 1; 1]; [0; 1; 1]; [1; 1; 0]] // 0111/1000/1110/1110
[[0; 1; 1]; [1; 1; 1]; [1; 1; 0]] // 1000/1010/0111/0010
[[1; 1; 1]; [1; 1; 1]; [1; 1; 0]] // 1011/0100/0010/0101
[[1; 0; 1]; [0; 0; 0]; [1; 0; 1]] // 0110/1100/1110/0111
[[1; 1; 1]; [0; 0; 0]; [1; 0; 1]] // 0011/0001/1110/0100
[[1; 1; 1]; [1; 0; 0]; [1; 0; 1]] // 1101/0010/1011/0100
[[1; 0; 1]; [0; 1; 0]; [1; 0; 1]] // 0100/1011/0001/1110
[[1; 1; 1]; [0; 1; 0]; [1; 0; 1]] // 0010/0000/1111/1111
[[1; 1; 1]; [1; 1; 0]; [1; 0; 1]] // 1110/1001/0000/1001
[[1; 0; 1]; [1; 0; 1]; [1; 0; 1]] // 1101/1110/0000/1000
[[1; 1; 1]; [1; 0; 1]; [1; 0; 1]] // 1100/0111/1001/0100
[[1; 0; 1]; [1; 1; 1]; [1; 0; 1]] // 1000/1110/0111/0010
[[1; 1; 1]; [1; 1; 1]; [1; 0; 1]] // 0000/0110/0100/1110
[[1; 1; 1]; [1; 0; 1]; [1; 1; 1]] // 1100/1000/0111/1000
[[1; 1; 1]; [1; 1; 1]; [1; 1; 1]] // 0111/1110/1011/0010
    ]


    new create(env: Env) =>
        m(env)

    fun flip_v(a : Matrix): Matrix =>
        a.reverse()

    fun flip_h(a : Matrix): Matrix =>
        let res = Matrix.create(a.size())
        for elem in a.values() do
            res.push(elem.reverse())
        end
        res

    fun rotate(a : Matrix): Matrix =>
        let rotated = Matrix.create(a.size())
        for i in Range(0, a.size()) do
            let row = Array[I32].create(a.size())
            for j in Range(0, a.size()) do
                try
                    row.push(a.apply(j)?.apply(a.size()-1 - i)?)
                else
                    row.push(-1)
                end
            end
            rotated.push(row)
        end
        rotated

    fun print_matrix(matrix: Matrix, env: Env) =>
        for row in matrix.values() do
            for elem in row.values() do
                env.out.write(elem.string() + " ")
            end
            env.out.write("\n")
        end

    fun symmetries(matrix' : Matrix) : Array[Matrix] =>
        let matrix = matrix'.clone()
        [
            matrix
            rotate(matrix)
            rotate(rotate(matrix))
            rotate(rotate(rotate(matrix)))
            flip_h(matrix)
            flip_v(matrix)
            rotate(flip_h(matrix))
            flip_h(rotate(matrix))
        ]

    fun m(env: Env) => 
        let test_matrix: Matrix = [ [0; 1]; [0; 0]]
        var index: I32 = 0
        for pattern in input_2x2.values() do
            for pattern_instance in symmetries(pattern).values() do
                if test_matrix == pattern_instance then
                    env.out.print("Got match! index=")
                    env.out.print(index.string())
                end
            end
            index = index + 1
        end

        // for matrix in symmetries.values() do
        //     print_matrix(matrix, env)
        //     env.out.print("---")
        // end

