use "collections"

type Matrix is Array[Array[I32]]

actor Main
    var input_2x2 : Array[Matrix] ref = [
[[0; 0]; [0; 0]] // 011/100/001
[[1; 0]; [0; 0]] // 011/100/111
[[1; 1]; [0; 0]] // 001/101/100
[[0; 1]; [1; 0]] // 100/100/010
[[1; 1]; [1; 0]] // 010/100/100
[[1; 1]; [1; 1]] // 011/000/011
    ]
    var output_2x2 : Array[Matrix] ref = [
 [[0;1;1];[1;0;0];[0;0;1]]
 [[0;1;1];[1;0;0];[1;1;1]]
 [[0;0;1];[1;0;1];[1;0;0]]
 [[1;0;0];[1;0;0];[0;1;0]]
 [[0;1;0];[1;0;0];[1;0;0]]
 [[0;1;1];[0;0;0];[0;1;1]]
    ]
    var input_3x3 : Array[Matrix] ref = [
[[0; 0; 0]; [0; 0; 0]; [0; 0; 0]] // 1010/1110/1111/1001
[[1; 0; 0]; [0; 0; 0]; [0; 0; 0]] // 0111/1111/1100/1011
[[0; 1; 0]; [0; 0; 0]; [0; 0; 0]] // 1110/0111/1001/1011
[[1; 1; 0]; [0; 0; 0]; [0; 0; 0]] // 0000/0000/0100/1100
[[1; 0; 1]; [0; 0; 0]; [0; 0; 0]] // 0001/0110/0000/1100
[[1; 1; 1]; [0; 0; 0]; [0; 0; 0]] // 1100/1100/1101/0011
[[0; 1; 0]; [1; 0; 0]; [0; 0; 0]] // 0100/1110/1100/1111
[[1; 1; 0]; [1; 0; 0]; [0; 0; 0]] // 1111/1101/0000/0011
[[0; 0; 1]; [1; 0; 0]; [0; 0; 0]] // 0010/1111/0001/1011
[[1; 0; 1]; [1; 0; 0]; [0; 0; 0]] // 1010/1100/1100/0110
[[0; 1; 1]; [1; 0; 0]; [0; 0; 0]] // 1100/1111/0010/0001
[[1; 1; 1]; [1; 0; 0]; [0; 0; 0]] // 1001/1010/1101/1010
[[0; 0; 0]; [0; 1; 0]; [0; 0; 0]] // 0101/0010/1000/0000
[[1; 0; 0]; [0; 1; 0]; [0; 0; 0]] // 1100/0011/0011/0100
[[0; 1; 0]; [0; 1; 0]; [0; 0; 0]] // 0000/1100/1100/1011
[[1; 1; 0]; [0; 1; 0]; [0; 0; 0]] // 0001/1100/1001/0111
[[1; 0; 1]; [0; 1; 0]; [0; 0; 0]] // 1111/1101/1110/0011
[[1; 1; 1]; [0; 1; 0]; [0; 0; 0]] // 0000/0001/0111/0100
[[0; 1; 0]; [1; 1; 0]; [0; 0; 0]] // 1010/1001/0110/0101
[[1; 1; 0]; [1; 1; 0]; [0; 0; 0]] // 0111/1000/1001/1010
[[0; 0; 1]; [1; 1; 0]; [0; 0; 0]] // 0111/1111/0000/1011
[[1; 0; 1]; [1; 1; 0]; [0; 0; 0]] // 0001/0111/0111/0111
[[0; 1; 1]; [1; 1; 0]; [0; 0; 0]] // 0011/0011/0111/1101
[[1; 1; 1]; [1; 1; 0]; [0; 0; 0]] // 1111/1001/1111/1010
[[0; 0; 0]; [1; 0; 1]; [0; 0; 0]] // 1011/0010/0111/1010
[[1; 0; 0]; [1; 0; 1]; [0; 0; 0]] // 1111/1101/1101/0000
[[0; 1; 0]; [1; 0; 1]; [0; 0; 0]] // 1000/0001/1011/1001
[[1; 1; 0]; [1; 0; 1]; [0; 0; 0]] // 0101/1100/1100/0000
[[1; 0; 1]; [1; 0; 1]; [0; 0; 0]] // 1101/1000/1100/0100
[[1; 1; 1]; [1; 0; 1]; [0; 0; 0]] // 0001/1110/0101/0001
[[0; 0; 0]; [1; 1; 1]; [0; 0; 0]] // 0111/1011/1000/1110
[[1; 0; 0]; [1; 1; 1]; [0; 0; 0]] // 0011/0100/0111/0010
[[0; 1; 0]; [1; 1; 1]; [0; 0; 0]] // 0000/0110/1011/1011
[[1; 1; 0]; [1; 1; 1]; [0; 0; 0]] // 0101/1101/1000/1010
[[1; 0; 1]; [1; 1; 1]; [0; 0; 0]] // 0010/1000/1010/0110
[[1; 1; 1]; [1; 1; 1]; [0; 0; 0]] // 0011/0101/1001/0110
[[0; 0; 1]; [0; 0; 0]; [1; 0; 0]] // 0011/0100/1101/1100
[[1; 0; 1]; [0; 0; 0]; [1; 0; 0]] // 0010/0000/1000/0001
[[0; 1; 1]; [0; 0; 0]; [1; 0; 0]] // 0110/0011/1111/1000
[[1; 1; 1]; [0; 0; 0]; [1; 0; 0]] // 1011/0000/1100/1011
[[0; 1; 1]; [1; 0; 0]; [1; 0; 0]] // 0111/0001/1110/0000
[[1; 1; 1]; [1; 0; 0]; [1; 0; 0]] // 0101/1010/1011/0010
[[0; 0; 1]; [0; 1; 0]; [1; 0; 0]] // 0001/0010/0011/0101
[[1; 0; 1]; [0; 1; 0]; [1; 0; 0]] // 1000/1101/0111/1010
[[0; 1; 1]; [0; 1; 0]; [1; 0; 0]] // 1110/1111/1001/1101
[[1; 1; 1]; [0; 1; 0]; [1; 0; 0]] // 0000/0010/0000/1000
[[0; 1; 1]; [1; 1; 0]; [1; 0; 0]] // 0101/0110/0101/1011
[[1; 1; 1]; [1; 1; 0]; [1; 0; 0]] // 0000/1100/1110/0101
[[1; 0; 0]; [0; 0; 1]; [1; 0; 0]] // 0001/1000/1011/0111
[[0; 1; 0]; [0; 0; 1]; [1; 0; 0]] // 1001/0100/1110/1010
[[1; 1; 0]; [0; 0; 1]; [1; 0; 0]] // 1010/0010/1110/1110
[[1; 0; 1]; [0; 0; 1]; [1; 0; 0]] // 0101/1101/1100/1111
[[0; 1; 1]; [0; 0; 1]; [1; 0; 0]] // 1110/0000/0100/0001
[[1; 1; 1]; [0; 0; 1]; [1; 0; 0]] // 1010/0110/0101/1001
[[1; 0; 0]; [1; 0; 1]; [1; 0; 0]] // 1010/1101/0100/0111
[[0; 1; 0]; [1; 0; 1]; [1; 0; 0]] // 1101/1010/1000/1111
[[1; 1; 0]; [1; 0; 1]; [1; 0; 0]] // 0101/1000/0010/1011
[[0; 0; 1]; [1; 0; 1]; [1; 0; 0]] // 1101/0110/1000/0111
[[1; 0; 1]; [1; 0; 1]; [1; 0; 0]] // 0011/0000/0000/1111
[[0; 1; 1]; [1; 0; 1]; [1; 0; 0]] // 1111/1010/1110/0101
[[1; 1; 1]; [1; 0; 1]; [1; 0; 0]] // 1011/0010/1100/1000
[[1; 0; 0]; [0; 1; 1]; [1; 0; 0]] // 0011/1101/1111/0100
[[0; 1; 0]; [0; 1; 1]; [1; 0; 0]] // 0011/1100/0100/0011
[[1; 1; 0]; [0; 1; 1]; [1; 0; 0]] // 0011/0101/1001/0000
[[1; 0; 1]; [0; 1; 1]; [1; 0; 0]] // 1000/1100/0001/0101
[[0; 1; 1]; [0; 1; 1]; [1; 0; 0]] // 1100/0001/0111/0101
[[1; 1; 1]; [0; 1; 1]; [1; 0; 0]] // 1111/0010/0110/1011
[[1; 0; 0]; [1; 1; 1]; [1; 0; 0]] // 0101/1101/1010/1010
[[0; 1; 0]; [1; 1; 1]; [1; 0; 0]] // 0111/1001/0101/1110
[[1; 1; 0]; [1; 1; 1]; [1; 0; 0]] // 1100/0100/1110/0101
[[0; 0; 1]; [1; 1; 1]; [1; 0; 0]] // 1011/0000/0001/0010
[[1; 0; 1]; [1; 1; 1]; [1; 0; 0]] // 1000/1001/0000/0100
[[0; 1; 1]; [1; 1; 1]; [1; 0; 0]] // 1111/1001/0010/0101
[[1; 1; 1]; [1; 1; 1]; [1; 0; 0]] // 0110/1100/0100/0010
[[0; 1; 0]; [1; 0; 1]; [0; 1; 0]] // 1010/0111/1010/0011
[[1; 1; 0]; [1; 0; 1]; [0; 1; 0]] // 0110/0000/0011/1100
[[1; 0; 1]; [1; 0; 1]; [0; 1; 0]] // 0001/0000/0101/0011
[[1; 1; 1]; [1; 0; 1]; [0; 1; 0]] // 0100/1111/1010/1011
[[0; 1; 0]; [1; 1; 1]; [0; 1; 0]] // 1001/0101/1001/1010
[[1; 1; 0]; [1; 1; 1]; [0; 1; 0]] // 0100/1100/1001/0011
[[1; 0; 1]; [1; 1; 1]; [0; 1; 0]] // 1010/0110/1101/0101
[[1; 1; 1]; [1; 1; 1]; [0; 1; 0]] // 1010/0001/0011/1000
[[1; 0; 1]; [0; 0; 1]; [1; 1; 0]] // 0010/0010/0001/1001
[[1; 1; 1]; [0; 0; 1]; [1; 1; 0]] // 1001/1110/0000/1101
[[0; 1; 1]; [1; 0; 1]; [1; 1; 0]] // 1011/0101/0001/0011
[[1; 1; 1]; [1; 0; 1]; [1; 1; 0]] // 1011/0001/0110/0111
[[1; 0; 1]; [0; 1; 1]; [1; 1; 0]] // 0000/1101/0000/0001
[[1; 1; 1]; [0; 1; 1]; [1; 1; 0]] // 0111/1000/1110/1110
[[0; 1; 1]; [1; 1; 1]; [1; 1; 0]] // 1000/1010/0111/0010
[[1; 1; 1]; [1; 1; 1]; [1; 1; 0]] // 1011/0100/0010/0101
[[1; 0; 1]; [0; 0; 0]; [1; 0; 1]] // 0110/1100/1110/0111
[[1; 1; 1]; [0; 0; 0]; [1; 0; 1]] // 0011/0001/1110/0100
[[1; 1; 1]; [1; 0; 0]; [1; 0; 1]] // 1101/0010/1011/0100
[[1; 0; 1]; [0; 1; 0]; [1; 0; 1]] // 0100/1011/0001/1110
[[1; 1; 1]; [0; 1; 0]; [1; 0; 1]] // 0010/0000/1111/1111
[[1; 1; 1]; [1; 1; 0]; [1; 0; 1]] // 1110/1001/0000/1001
[[1; 0; 1]; [1; 0; 1]; [1; 0; 1]] // 1101/1110/0000/1000
[[1; 1; 1]; [1; 0; 1]; [1; 0; 1]] // 1100/0111/1001/0100
[[1; 0; 1]; [1; 1; 1]; [1; 0; 1]] // 1000/1110/0111/0010
[[1; 1; 1]; [1; 1; 1]; [1; 0; 1]] // 0000/0110/0100/1110
[[1; 1; 1]; [1; 0; 1]; [1; 1; 1]] // 1100/1000/0111/1000
[[1; 1; 1]; [1; 1; 1]; [1; 1; 1]] // 0111/1110/1011/0010
    ]
    var output_3x3 : Array[Matrix] ref = [
[[1;0;1;0]; [1;1;1;0]; [1;1;1;1]; [1;0;0;1]]
[[0;1;1;1]; [1;1;1;1]; [1;1;0;0]; [1;0;1;1]]
[[1;1;1;0]; [0;1;1;1]; [1;0;0;1]; [1;0;1;1]]
[[0;0;0;0]; [0;0;0;0]; [0;1;0;0]; [1;1;0;0]]
[[0;0;0;1]; [0;1;1;0]; [0;0;0;0]; [1;1;0;0]]
[[1;1;0;0]; [1;1;0;0]; [1;1;0;1]; [0;0;1;1]]
[[0;1;0;0]; [1;1;1;0]; [1;1;0;0]; [1;1;1;1]]
[[1;1;1;1]; [1;1;0;1]; [0;0;0;0]; [0;0;1;1]]
[[0;0;1;0]; [1;1;1;1]; [0;0;0;1]; [1;0;1;1]]
[[1;0;1;0]; [1;1;0;0]; [1;1;0;0]; [0;1;1;0]]
[[1;1;0;0]; [1;1;1;1]; [0;0;1;0]; [0;0;0;1]]
[[1;0;0;1]; [1;0;1;0]; [1;1;0;1]; [1;0;1;0]]
[[0;1;0;1]; [0;0;1;0]; [1;0;0;0]; [0;0;0;0]]
[[1;1;0;0]; [0;0;1;1]; [0;0;1;1]; [0;1;0;0]]
[[0;0;0;0]; [1;1;0;0]; [1;1;0;0]; [1;0;1;1]]
[[0;0;0;1]; [1;1;0;0]; [1;0;0;1]; [0;1;1;1]]
[[1;1;1;1]; [1;1;0;1]; [1;1;1;0]; [0;0;1;1]]
[[0;0;0;0]; [0;0;0;1]; [0;1;1;1]; [0;1;0;0]]
[[1;0;1;0]; [1;0;0;1]; [0;1;1;0]; [0;1;0;1]]
[[0;1;1;1]; [1;0;0;0]; [1;0;0;1]; [1;0;1;0]]
[[0;1;1;1]; [1;1;1;1]; [0;0;0;0]; [1;0;1;1]]
[[0;0;0;1]; [0;1;1;1]; [0;1;1;1]; [0;1;1;1]]
[[0;0;1;1]; [0;0;1;1]; [0;1;1;1]; [1;1;0;1]]
[[1;1;1;1]; [1;0;0;1]; [1;1;1;1]; [1;0;1;0]]
[[1;0;1;1]; [0;0;1;0]; [0;1;1;1]; [1;0;1;0]]
[[1;1;1;1]; [1;1;0;1]; [1;1;0;1]; [0;0;0;0]]
[[1;0;0;0]; [0;0;0;1]; [1;0;1;1]; [1;0;0;1]]
[[0;1;0;1]; [1;1;0;0]; [1;1;0;0]; [0;0;0;0]]
[[1;1;0;1]; [1;0;0;0]; [1;1;0;0]; [0;1;0;0]]
[[0;0;0;1]; [1;1;1;0]; [0;1;0;1]; [0;0;0;1]]
[[0;1;1;1]; [1;0;1;1]; [1;0;0;0]; [1;1;1;0]]
[[0;0;1;1]; [0;1;0;0]; [0;1;1;1]; [0;0;1;0]]
[[0;0;0;0]; [0;1;1;0]; [1;0;1;1]; [1;0;1;1]]
[[0;1;0;1]; [1;1;0;1]; [1;0;0;0]; [1;0;1;0]]
[[0;0;1;0]; [1;0;0;0]; [1;0;1;0]; [0;1;1;0]]
[[0;0;1;1]; [0;1;0;1]; [1;0;0;1]; [0;1;1;0]]
[[0;0;1;1]; [0;1;0;0]; [1;1;0;1]; [1;1;0;0]]
[[0;0;1;0]; [0;0;0;0]; [1;0;0;0]; [0;0;0;1]]
[[0;1;1;0]; [0;0;1;1]; [1;1;1;1]; [1;0;0;0]]
[[1;0;1;1]; [0;0;0;0]; [1;1;0;0]; [1;0;1;1]]
[[0;1;1;1]; [0;0;0;1]; [1;1;1;0]; [0;0;0;0]]
[[0;1;0;1]; [1;0;1;0]; [1;0;1;1]; [0;0;1;0]]
[[0;0;0;1]; [0;0;1;0]; [0;0;1;1]; [0;1;0;1]]
[[1;0;0;0]; [1;1;0;1]; [0;1;1;1]; [1;0;1;0]]
[[1;1;1;0]; [1;1;1;1]; [1;0;0;1]; [1;1;0;1]]
[[0;0;0;0]; [0;0;1;0]; [0;0;0;0]; [1;0;0;0]]
[[0;1;0;1]; [0;1;1;0]; [0;1;0;1]; [1;0;1;1]]
[[0;0;0;0]; [1;1;0;0]; [1;1;1;0]; [0;1;0;1]]
[[0;0;0;1]; [1;0;0;0]; [1;0;1;1]; [0;1;1;1]]
[[1;0;0;1]; [0;1;0;0]; [1;1;1;0]; [1;0;1;0]]
[[1;0;1;0]; [0;0;1;0]; [1;1;1;0]; [1;1;1;0]]
[[0;1;0;1]; [1;1;0;1]; [1;1;0;0]; [1;1;1;1]]
[[1;1;1;0]; [0;0;0;0]; [0;1;0;0]; [0;0;0;1]]
[[1;0;1;0]; [0;1;1;0]; [0;1;0;1]; [1;0;0;1]]
[[1;0;1;0]; [1;1;0;1]; [0;1;0;0]; [0;1;1;1]]
[[1;1;0;1]; [1;0;1;0]; [1;0;0;0]; [1;1;1;1]]
[[0;1;0;1]; [1;0;0;0]; [0;0;1;0]; [1;0;1;1]]
[[1;1;0;1]; [0;1;1;0]; [1;0;0;0]; [0;1;1;1]]
[[0;0;1;1]; [0;0;0;0]; [0;0;0;0]; [1;1;1;1]]
[[1;1;1;1]; [1;0;1;0]; [1;1;1;0]; [0;1;0;1]]
[[1;0;1;1]; [0;0;1;0]; [1;1;0;0]; [1;0;0;0]]
[[0;0;1;1]; [1;1;0;1]; [1;1;1;1]; [0;1;0;0]]
[[0;0;1;1]; [1;1;0;0]; [0;1;0;0]; [0;0;1;1]]
[[0;0;1;1]; [0;1;0;1]; [1;0;0;1]; [0;0;0;0]]
[[1;0;0;0]; [1;1;0;0]; [0;0;0;1]; [0;1;0;1]]
[[1;1;0;0]; [0;0;0;1]; [0;1;1;1]; [0;1;0;1]]
[[1;1;1;1]; [0;0;1;0]; [0;1;1;0]; [1;0;1;1]]
[[0;1;0;1]; [1;1;0;1]; [1;0;1;0]; [1;0;1;0]]
[[0;1;1;1]; [1;0;0;1]; [0;1;0;1]; [1;1;1;0]]
[[1;1;0;0]; [0;1;0;0]; [1;1;1;0]; [0;1;0;1]]
[[1;0;1;1]; [0;0;0;0]; [0;0;0;1]; [0;0;1;0]]
[[1;0;0;0]; [1;0;0;1]; [0;0;0;0]; [0;1;0;0]]
[[1;1;1;1]; [1;0;0;1]; [0;0;1;0]; [0;1;0;1]]
[[0;1;1;0]; [1;1;0;0]; [0;1;0;0]; [0;0;1;0]]
[[1;0;1;0]; [0;1;1;1]; [1;0;1;0]; [0;0;1;1]]
[[0;1;1;0]; [0;0;0;0]; [0;0;1;1]; [1;1;0;0]]
[[0;0;0;1]; [0;0;0;0]; [0;1;0;1]; [0;0;1;1]]
[[0;1;0;0]; [1;1;1;1]; [1;0;1;0]; [1;0;1;1]]
[[1;0;0;1]; [0;1;0;1]; [1;0;0;1]; [1;0;1;0]]
[[0;1;0;0]; [1;1;0;0]; [1;0;0;1]; [0;0;1;1]]
[[1;0;1;0]; [0;1;1;0]; [1;1;0;1]; [0;1;0;1]]
[[1;0;1;0]; [0;0;0;1]; [0;0;1;1]; [1;0;0;0]]
[[0;0;1;0]; [0;0;1;0]; [0;0;0;1]; [1;0;0;1]]
[[1;0;0;1]; [1;1;1;0]; [0;0;0;0]; [1;1;0;1]]
[[1;0;1;1]; [0;1;0;1]; [0;0;0;1]; [0;0;1;1]]
[[1;0;1;1]; [0;0;0;1]; [0;1;1;0]; [0;1;1;1]]
[[0;0;0;0]; [1;1;0;1]; [0;0;0;0]; [0;0;0;1]]
[[0;1;1;1]; [1;0;0;0]; [1;1;1;0]; [1;1;1;0]]
[[1;0;0;0]; [1;0;1;0]; [0;1;1;1]; [0;0;1;0]]
[[1;0;1;1]; [0;1;0;0]; [0;0;1;0]; [0;1;0;1]]
[[0;1;1;0]; [1;1;0;0]; [1;1;1;0]; [0;1;1;1]]
[[0;0;1;1]; [0;0;0;1]; [1;1;1;0]; [0;1;0;0]]
[[1;1;0;1]; [0;0;1;0]; [1;0;1;1]; [0;1;0;0]]
[[0;1;0;0]; [1;0;1;1]; [0;0;0;1]; [1;1;1;0]]
[[0;0;1;0]; [0;0;0;0]; [1;1;1;1]; [1;1;1;1]]
[[1;1;1;0]; [1;0;0;1]; [0;0;0;0]; [1;0;0;1]]
[[1;1;0;1]; [1;1;1;0]; [0;0;0;0]; [1;0;0;0]]
[[1;1;0;0]; [0;1;1;1]; [1;0;0;1]; [0;1;0;0]]
[[1;0;0;0]; [1;1;1;0]; [0;1;1;1]; [0;0;1;0]]
[[0;0;0;0]; [0;1;1;0]; [0;1;0;0]; [1;1;1;0]]
[[1;1;0;0]; [1;0;0;0]; [0;1;1;1]; [1;0;0;0]]
[[0;1;1;1]; [1;1;1;0]; [1;0;1;1]; [0;0;1;0]]
    ]

    new create(env: Env) =>
        m(env)

    fun flip_v(a : Matrix): Matrix =>
        a.reverse()

    fun flip_h(a : Matrix): Matrix =>
        let res = Matrix(a.size())
        for elem in a.values() do
            res.push(elem.reverse())
        end
        res

    fun rotate(a : Matrix): Matrix =>
        let rotated = Matrix(a.size())
        for i in Range(0, a.size()) do
            let row = Array[I32](a.size())
            for j in Range(0, a.size()) do
                try
                    row.push(a.apply(j)?.apply(a.size()-1 - i)?)
                else
                    row.push(-1)
                end
            end
            rotated.push(row)
        end
        rotated

    fun print_matrix(matrix: Matrix box, env: Env) =>
        for row in matrix.values() do
            for elem in row.values() do
                let char = if elem == 1 then "#" else "." end
                env.out.write(char + " ")
            end
            env.out.write("\n")
        end

    fun symmetries(matrix : Matrix) : Array[Matrix] =>
        // let matrix = matrix'.clone()
        [
            matrix
            rotate(matrix)
            rotate(rotate(matrix))
            rotate(rotate(rotate(matrix)))
            flip_h(matrix)
            flip_v(matrix)
            rotate(flip_h(matrix))
            flip_h(rotate(matrix))
        ]

    fun eq(m1 : Matrix box, m2 : Matrix box) : Bool =>
        let l1 = m1.size()
        let l2 = m2.size()
        if l1 != l2 then
            false
        else
            for i in Range(0, l1) do
                for j in Range(0, l1) do
                    try
                        if m1(i)?(j)? != m2(i)?(j)? then
                            return false
                        end
                    else
                        return false
                    end
                end
            end
        end
        true

    fun match_one(patterns: Array[Matrix] box, expansions: Array[Matrix] box, input: Matrix ref, env: Env): Matrix box? =>
        for input_instance in symmetries(input).values() do
            var i : USize = 0
            for pattern in patterns.values() do
                if eq(input_instance,pattern) then
                    return expansions(i)?
                end
                i = i + 1
            end
        end
        error

    // assume input square
    fun slice(input: Matrix, patterns: Array[Matrix] box, expansions: Array[Matrix] box, n: USize, env: Env): Array[Array[I32]]? =>
        let slices = input.size() / n
        let outsize = slices * (n+1)
        let output = Array[Array[I32]](outsize)

        for outrows in Range(0, outsize) do
            output.push(Array[I32].init(-2, outsize))
        end

        for i in Range(0, slices) do
            for j in Range(0, slices) do
                let input_slice = Matrix(n)
                for k in Range(0, n) do
                    let row = Array[I32](n)
                    for l in Range(0, n) do
                        row.push(input((i*n)+k)?((j*n)+l)?)
                    end
                    input_slice.push(row)
                end
                let updated = match_one(patterns, expansions, input_slice, env)?
                for k' in Range(0, n+1) do
                    for l' in Range(0, n+1) do
                        output((i*(n+1))+k')?((j*(n+1))+l')? = updated(k')?(l')?
                    end
                end
            end
        end
        output

    fun count_ones(input: Matrix): I32 =>
        var count : I32 = 0
        for row in input.values() do
            for v in row.values() do
                if v == 1 then
                    count = count + 1
                end
            end
        end
        count

    fun round(input: Matrix, env: Env): Matrix ? =>
        let out = if (input.size() % 2) == 0 then
            slice(input, input_2x2, output_2x2, 2, env)?
        else
            slice(input, input_3x3, output_3x3, 3, env)?
        end
        // print_matrix(out, env)
        env.out.print(count_ones(out).string())
        out

    fun m(env: Env) => 
        let rounds = 18
        var matrix: Matrix = [ [0; 1; 0]; [0; 0; 1]; [1; 1; 1] ]
        try
            for round_number in Range(1, rounds+1) do
                env.out.print("Round " + round_number.string())
                matrix = round(matrix, env)?
            end
        else
            env.out.print("Error caught")
        end


